{"version":3,"sources":["logo.svg","Commands.js","CommandLine.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Commands","input","sorry","tokens","toLowerCase","split","cmd","undefined","v","command","desc","repeat","retval","entries","c","length","cursor","isPrevKeyArr","CommandLine","props","loadStartUp","arr","state","messages","i","push","key","i2","c2","onKeyDown","e","document","getElementById","innerHTML","preventDefault","addCommands","history","text","startupMessages","this","setState","Promise","r","setTimeout","checkCommand","startUpMessages","id","contentEditable","style","position","width","height","outline","display","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sLCAtBC,E,0GACCC,GAClB,IAAIC,EAAQ,8FACRC,EAASF,EAAMG,cAAcC,MAAM,KACnCC,EAAMH,EAAO,GAEjB,OAAOG,GAGL,IAAK,OACH,OAAOH,EAAO,IACZ,UAAKI,EACL,IAAK,GACL,QACE,IAAIC,EAAI,CACN,CAACC,QAAQ,OAAQC,KAAM,oDACvB,CAACD,QAAQ,KAAMC,KAAM,2BACrB,CAACD,QAAQ,QAASC,KAAM,sBACxB,CAACD,QAAQ,iBAAkBC,KAAM,0CACjC,CAACD,QAAQ,kBAAmBC,KAAM,qDAdhC,0DAc2FC,OAAO,IAAI,8CAEtGC,EAAS,GARf,uBASE,IAAI,IAAJ,IAAiBJ,EAAEK,UAAnB,+CAA6B,CAAC,IAAD,6BAAlBC,GAAkB,WAC3BF,GAAWE,EAAEL,QAlBX,0DAkB0BE,OAAO,GAAKG,EAAEL,QAAQM,QAAQD,EAAEJ,KAAO,QAVvE,kFAYE,OAAOE,EAGb,IAAK,QACH,OAAOT,EAAO,IACZ,UAAKI,EACH,MAAO,oEACT,IAAK,KACH,MAAO,qFACT,IAAK,SACH,MAAO,6IACT,QACE,MAAM,oBAAN,OAA2BJ,EAAO,GAAlC,sDAEN,IAAK,KAEL,IAAK,OACH,OAAOD,EACT,IAAK,GACH,MAAO,GACT,IAAK,QACH,MAAO,eACT,QACE,MAAM,IAAN,OAAYI,EAAZ,gG,KC9CJU,EAAS,EACTC,GAAe,EAyFJC,E,YAvFb,WAAYC,GAAO,IAAD,8BAChB,+CAUFC,YAAc,WACZ,IAAIC,EAAM,GADQ,uBAElB,IAAI,IAAJ,IAAkB,EAAKC,MAAMC,SAASV,UAAtC,+CACA,CAAC,IAAD,6BADSW,EACT,KADYV,EACZ,KACMN,EAAIM,EAAET,MAAM,QAChB,GAAe,GAAZG,EAAEO,OACHM,EAAII,KAAO,yBAAKC,IAAOZ,EAAIU,GAAIV,QAE5B,CAAC,IAAD,uBACH,IAAI,IAAJ,IAAoBN,EAAEK,UAAtB,+CAAiC,CAAC,IAAD,6BAAxBc,EAAwB,KAApBC,EAAoB,KAC/BP,EAAII,KAAO,yBAAKC,IAAOZ,EAAIU,EAAII,EAAKD,GAAKC,KAFxC,qFARW,kFAclB,OAAOP,GAzBS,EA2ClBQ,UAAY,SAACC,GACPb,IACFD,EAAS,GAEX,IAAIf,EAAS8B,SAASC,eAAe,iBAAiBC,UAAU7B,cAchE,GAbY,SAAT0B,EAAEJ,KAEHI,EAAEI,iBACF,EAAKC,YAAYlC,IACA,WAAT6B,EAAEJ,IACPV,EAAU,EAAKM,MAAMc,QAAQrB,OAAQ,GACtCC,IAEe,aAATc,EAAEJ,KACPV,EAAS,GACVA,IAGO,WAARc,EAAEJ,KAA4B,aAATI,EAAEJ,IAAoB,CAC5C,IAAIW,EAAO,EAAKf,MAAMc,QAAQ,EAAKd,MAAMc,QAAQrB,OAASC,GAC1De,SAASC,eAAe,iBAAiBC,eAAsB1B,IAAT8B,EAAsB,GAAKA,EAE/EpB,EAAwB,WAARa,EAAEJ,KAA4B,aAATI,EAAEJ,KA/D3C,EAAKJ,MAAQ,CACXC,SAAUJ,EAAMmB,gBAChBF,QAAS,CAAC,KAJI,E,iFAShBG,KAAKJ,YAAY,U,kCAkBDlC,G,yEAChB8B,SAASC,eAAe,iBAAiBC,UAAY,GACrDM,KAAKC,SAAS,CACZjB,SAAS,GAAD,mBAAMgB,KAAKjB,MAAMC,UAAjB,CAA2B,SAAWtB,MAEhDsC,KAAKC,SAAS,CACZJ,QAAQ,GAAD,mBAAMG,KAAKjB,MAAMc,SAAjB,CAA0BnC,M,mBAEzB,IAAIwC,SAAQ,SAAAC,GAAC,OAAIC,WAAWD,EAAG,Q,OACzCH,KAAKC,SAAS,CACZjB,SAAS,GAAD,mBAAMgB,KAAKjB,MAAMC,UAAjB,CAA2BvB,EAAS4C,aAAa3C,OAC7C,SAATA,GACDsC,KAAKC,SAAS,CAACjB,SAAU,K,gFA6B7B,IAAMsB,EAAkBN,KAAKnB,cAQ7B,OACA,6BACGyB,EACD,wCACA,yBAAKC,GAAI,gBAAgBC,gBAAgB,OAAOlB,UAAWU,KAAKV,UAAWmB,MAX/D,CACZC,SAAU,WACVC,MAAO,MACPC,OAAQ,OACRC,QAAS,wBACTC,QAAS,uB,GA3EWC,IAAMC,WCQjBC,MARf,WACE,OACE,yBAAKC,UAAU,OACT,kBAAC,EAAD,CAAanB,gBAAmB,CAAC,6CAA6C,4DCKpEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD6H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.08d9bc9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class Commands {\r\n  static checkCommand(input) {\r\n    var sorry = \"Sorry, this portfolio is still under construction. I have yet to add this functionality. :(\"\r\n    var tokens = input.toLowerCase().split(\" \")\r\n    var cmd = tokens[0];\r\n    var invis = \"‎‏‏‎ ‎‎‏‏‎\";\r\n    switch(cmd)\r\n    {\r\n      //‏‏‎[ ‎‏‏‎ ‎‏‏‎ ‏‏‎ ‎‏‏‎ ‎‏‏‎ ‎‏‏‎ ‎‏‏‎ ‎‎‏‏‎ ‎‏‏‎ ‎‎‎‎‎‎‎]invis characters//\r\n      case \"help\":\r\n        switch(tokens[1]){\r\n          case undefined:\r\n          case \"\":\r\n          default:\r\n            let v = [\r\n              {command:\"HELP\", desc: \"Lists all known commands and their descriptions.\"},\r\n              {command:\"LS\", desc: \"Lists all project files\"},\r\n              {command:\"CLEAR\", desc: \"Clears the console\"},\r\n              {command:\"MORE <project>\", desc: \"Display the description of the project\"},\r\n              {command:\"ABOUT <subject>\", desc: \"Use to learn a little more about the subject. <br>\"+invis.repeat(20)+\"Use ME or SKILLS to learn more about them\"},\r\n            ]\r\n            let retval = \"\";\r\n            for(let [i,c] of v.entries()){\r\n              retval += (c.command +invis.repeat(20 - c.command.length)+c.desc + \"<br>\");\r\n            }\r\n            return retval;\r\n\r\n        }\r\n      case \"about\":\r\n        switch(tokens[1]){\r\n          case undefined:\r\n            return \"Hm, make sure to use an argument for this command. Ex: 'about me'\"\r\n          case \"me\":\r\n            return \"Hey! I'm Levi Huchingson, a UCF Computer Science student set to graduate Dec 2020!\"\r\n          case \"skills\":\r\n            return \"I am fluent in C, Java, and JavaScript. I'm currently focusing on learning Haskell. In the past I have dabbeled in C#, Python, and MatLab.\"\r\n          default:\r\n            return `Invalid argument ${tokens[1]}. Use HELP to learn more about the valid arguments`\r\n        }\r\n      case \"ls\":\r\n        return sorry;\r\n      case \"more\":\r\n        return sorry;\r\n      case \"\":\r\n        return \"\";\r\n      case \"clear\":\r\n        return \"levih> clear\"\r\n      default:\r\n        return  `'${cmd}' is not recognized as an internal or external command, operable program or batch file.`\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Commands from \"./Commands\"\r\nvar cursor = 0;\r\nvar isPrevKeyArr = false;\r\nclass CommandLine extends React.Component {\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      messages: props.startupMessages,\r\n      history: [\"\"],\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    // Help new vistors know what to do\r\n    this.addCommands(\"help\")\r\n  }\r\n  loadStartUp = () => {\r\n    var arr = [];\r\n    for(let [i, c] of this.state.messages.entries())\r\n    {\r\n      let v = c.split(\"<br>\")\r\n      if(v.length == 1) {\r\n        arr.push( (<div key = {c + i}>{c}</div>))\r\n      }\r\n      else {\r\n        for(let [i2, c2] of v.entries()) {\r\n          arr.push( (<div key = {c + i + c2 + i2}>{c2}</div>))\r\n        }\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n  async addCommands(input) {\r\n    document.getElementById(\"terminalInput\").innerHTML = \"\";\r\n    this.setState({\r\n      messages: [...this.state.messages, \"levih>\" + input]})\r\n      // add to history\r\n    this.setState({\r\n      history: [...this.state.history, input]})\r\n        //Check command\r\n        await new Promise(r => setTimeout(r, 10))\r\n    this.setState({\r\n      messages: [...this.state.messages, Commands.checkCommand(input)]});\r\n      if(input == \"clear\") {\r\n        this.setState({messages: []})\r\n      }\r\n\r\n  }\r\n  onKeyDown = (e) => {\r\n    if(!isPrevKeyArr)\r\n      cursor = 0;\r\n\r\n    let input =  document.getElementById(\"terminalInput\").innerHTML.toLowerCase();\r\n    if(e.key == 'Enter')\r\n    {\r\n      e.preventDefault();\r\n      this.addCommands(input);\r\n    } else if(e.key == \"ArrowUp\"){\r\n      if(cursor < (this.state.history.length -1)) {\r\n        cursor++;\r\n      }\r\n    } else if(e.key == \"ArrowDown\"){\r\n      if(cursor > 0) {\r\n        cursor--;\r\n      }\r\n    }\r\n    if(e.key ==\"ArrowUp\" || e.key == \"ArrowDown\") {\r\n      let text = this.state.history[this.state.history.length - cursor];\r\n      document.getElementById(\"terminalInput\").innerHTML = (text === undefined) ? \"\" : text;\r\n    }\r\n        isPrevKeyArr = (e.key ==\"ArrowUp\" || e.key == \"ArrowDown\")\r\n  }\r\n  render() {\r\n    const startUpMessages = this.loadStartUp();\r\n    const style = {\r\n      position: \"absolute\",\r\n      width: \"95%\",\r\n      height: \"100%\",\r\n      outline: \"0px solid transparent\",\r\n      display: \"inline-block\"\r\n    }\r\n    return (\r\n    <div>\r\n      {startUpMessages}\r\n      <span>levih></span>\r\n      <div id= \"terminalInput\" contentEditable=\"true\" onKeyDown={this.onKeyDown} style={style}>\r\n\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default CommandLine;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CommandLine from './CommandLine'\nfunction App() {\n  return (\n    <div className=\"App\">\n          <CommandLine startupMessages = {[\"Microsoft Windows [Version 10.0.18362.535]\",\"(c) 2019 Microsoft Corporation. All rights reserved.\"]}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}